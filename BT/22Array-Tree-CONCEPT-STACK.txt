//Really good use of vector(acting as stack) 	Link: https://leetcode.com/problems/maximum-binary-tree/description/
//how to get the intuion -> elements coming first should be placed left and maximum element should be root.
			
		so cur->left = s.back();//s.back() gives smallest element till now  
					

//Main concept is that if element is larger, then it has to be root, since it comes later, so  cur->left = s.back();
(it is also taking care of the position)
And if smaller element is encountered, then s.back()->right = cur;notice right child, as it has to be on the right side



 TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        vector <TreeNode *> s;
        for(int i=0;i<nums.size();++i) {
            TreeNode *cur = new TreeNode(nums[i]);
            while(!s.empty() && s.back()->val < nums[i]) {
                cur->left = s.back();
                s.pop_back();
            }
            if(!s.empty())
                s.back()->right = cur;
            
            s.push_back(cur);
        }
        return s.front();
    }