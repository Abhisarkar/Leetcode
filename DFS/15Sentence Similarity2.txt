

****************************************************************************************************

string find(string s, map<string, string> &parent) {
        return s == parent[s] ? s : find(parent[s], parent);
    }
    
    bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<pair<string, string>> pairs) {
        if(words1.size() != words2.size()) return false;
        map <string, string> parent;
        for(pair<string, string> p : pairs) 
            parent[p.first] = p.first, parent[p.second] = p.second;
        for(pair<string, string> p : pairs) 
            parent[find(p.second, parent)] = find(p.first, parent); // the roots(subset representatives) should be connected.
        for(int i=0; i<words1.size(); ++i) {
            if(find(words1[i], parent) != find(words2[i], parent)) return false;
        }
        return true;        
    }

****************************************************************************************************