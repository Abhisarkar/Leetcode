//Uses backtracking concept.

map<vector<int>, int> m;
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        if(m[needs]) return m[needs];
        int res = INT_MAX;
        for(vector<int> offer : special) { //"You could use any of special offers as many times as you want.", at each level one offer from                                              //all offers can be chosen.
            bool valid = true;
            vector<int> newneeds(needs.begin(), needs.end());
            for(int i=0; i<needs.size(); ++i) {
                newneeds[i] -= offer[i];
                if(newneeds[i]<0) {valid=false; break;}
            }
            if(valid) 
                res = min(res, offer.back() + shoppingOffers(price, special, newneeds));
        }
        int nprice=0;
        for(int i=0; i<needs.size(); ++i) 
            nprice += (needs[i] * price[i]);
        res = min(res, nprice);
        return m[needs] = res;
    }