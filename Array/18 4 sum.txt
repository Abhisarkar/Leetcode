//same concept as 3 sum, keep first 2 fixed and change the last two. O(n^3)

vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        if(nums.empty() || nums.size() < 4) return ans;
        sort(nums.begin(), nums.end());       
        int n = nums.size();
        for(int i=0; i<n-3; ++i) {
            for(int j=i+1; j<n-2; ++j) {
                int l=j+1, r=n-1;
                while(l < r) {
                    int sum = nums[i] + nums[j] + nums[l] + nums[r];
                    if(sum < target) l++;
                    else if(sum > target) r--;
                    else {
                        vector<int> res = {nums[i] , nums[j] , nums[l] , nums[r]};
                        ans.push_back(res);
                        while(l < r && nums[l] == res[2]) l++;
                        while(l < r && nums[r] == res[3]) r--;
                    }
                }
                while(j+1 < n-2 && nums[j+1] == nums[j]) j++;    
            }
             while(i+1 < n-3 && nums[i+1] == nums[i]) i++;   
        }
        return ans;
    }